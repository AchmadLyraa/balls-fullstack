// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String    @id @default(cuid())
  username        String    @unique
  email           String    @unique
  password        String
  fullName        String
  phoneNumber     String?
  role            UserRole  @default(CUSTOMER)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  bookings        Booking[]
  userPoints      UserPoint[]
  redemptions     Redemption[]
  payments        Payment[]
  pointSources    PointSource[]
  referralPoints  ReferralPoint[]
  promotionPoints PromotionPoint[]
  bookingPoints   BookingPoint[]
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

// Field model
model Field {
  id          String    @id @default(cuid())
  name        String
  description String?
  capacity    Int
  hourlyRate  Decimal   @db.Decimal(10, 2)
  isAvailable Boolean   @default(true)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bookings    Booking[]
}

// Booking model
model Booking {
  id          String    @id @default(cuid())
  userId      String
  fieldId     String
  bookingDate DateTime
  startTime   DateTime
  endTime     DateTime
  duration    Decimal   @db.Decimal(5, 2)
  amount      Decimal   @db.Decimal(10, 2)
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  field       Field     @relation(fields: [fieldId], references: [id])
  payments    Payment[]
  bookingPoints BookingPoint[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Payment model
model Payment {
  id          String    @id @default(cuid())
  bookingId   String
  userId      String
  amount      Decimal   @db.Decimal(10, 2)
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  notes       String?
  paymentDate DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  booking     Booking   @relation(fields: [bookingId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  QRIS
  CREDIT_CARD
  E_WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  CANCELLED
  REFUNDED
}

// Loyalty Program model
model LoyaltyProgram {
  id          String    @id @default(cuid())
  programName String
  description String?
  pointsRequired Int
  isActive    Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  redemptions Redemption[]
}

// User Points model
model UserPoint {
  id          String    @id @default(cuid())
  userId      String
  points      Int
  isActive    Boolean   @default(true)
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
}

// Point Source model
model PointSource {
  id          String    @id @default(cuid())
  sourceId    String
  userId      String
  points      Int
  sourceType  SourceType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
}

enum SourceType {
  BOOKING
  REFERRAL
  PROMOTION
  REDEMPTION
}

// Redemption model
model Redemption {
  id              String    @id @default(cuid())
  userId          String
  loyaltyProgramId String
  pointsUsed      Int
  status          RedemptionStatus @default(PENDING)
  redemptionDate  DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  loyaltyProgram  LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id])
}

enum RedemptionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// Referral Points model
model ReferralPoint {
  id          String    @id @default(cuid())
  userId      String
  referredUserId String
  points      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
}

// Promotion Points model
model PromotionPoint {
  id          String    @id @default(cuid())
  userId      String
  promotionId String
  points      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
}

// Booking Points model
model BookingPoint {
  id          String    @id @default(cuid())
  userId      String
  bookingId   String
  points      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  booking     Booking   @relation(fields: [bookingId], references: [id])
}
